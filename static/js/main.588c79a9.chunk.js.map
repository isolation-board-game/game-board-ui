{"version":3,"sources":["components/SimpleSelects.js","components/GameConfig.js","components/AppDrawer.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","formControl","margin","spacing","minWidth","SimpleSelects","props","title","options","helperText","classes","React","useState","value","setValue","FormControl","className","InputLabel","id","Select","labelId","onChange","event","target","map","val","index","MenuItem","style","fontWeight","FormHelperText","root","width","heading","fontSize","typography","pxToRem","fontWeightRegular","fontFamily","button","GameConfig","Accordion","AccordionSummary","expandIcon","aria-controls","Typography","AccordionDetails","position","BoardSizeConfigDetails","List","Button","variant","color","size","startIcon","fullWidth","display","appBar","transition","transitions","create","easing","sharp","duration","leavingScreen","appBarShift","marginLeft","easeOut","enteringScreen","menuButton","marginRight","hide","drawer","flexShrink","drawerPaper","backgroundColor","drawerHeader","alignItems","padding","mixins","toolbar","justifyContent","content","flexGrow","contentShift","componentColor","PersistentDrawerLeft","useTheme","open","setOpen","AppBar","clsx","Toolbar","IconButton","aria-label","onClick","edge","noWrap","paddingLeft","Drawer","anchor","paper","direction","Divider","App","prefersDarkMode","useMediaQuery","useMemo","createMuiTheme","palette","type","ThemeProvider","CssBaseline","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.588c79a9.chunk.js","sourcesContent":["import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport FormControl from '@material-ui/core/FormControl';\nimport { Select, MenuItem } from '@material-ui/core';\n\nconst useStyles = makeStyles((theme) => ({\n  formControl: {\n    margin: theme.spacing(1),\n    minWidth: 120,\n  }\n}));\n\nexport default function SimpleSelects(props) {\n  const title = props.title\n  const options = props.options\n  const helperText = props.helperText\n  \n  const classes = useStyles();\n  const [value, setValue] = React.useState('');\n\n  const handleChange = (event) => {\n    setValue(event.target.value);\n  };\n\n  return (\n    <div>\n      <FormControl className={classes.formControl}>\n        <InputLabel id=\"demo-simple-select-label\">{title}</InputLabel>\n        <Select\n          labelId=\"demo-simple-select-label\"\n          id=\"demo-simple-select\"\n          value={value}\n          onChange={handleChange}\n        >\n          {\n            options.map((val, index) => (\n              <MenuItem value={val} style={{fontWeight:'bold'}}>{val}</MenuItem>\n            ))\n          }\n        </Select>\n         \n        <FormHelperText>{helperText}</FormHelperText>\n      </FormControl>\n    </div>\n  );\n}\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Accordion from '@material-ui/core/Accordion';\nimport AccordionSummary from '@material-ui/core/AccordionSummary';\nimport AccordionDetails from '@material-ui/core/AccordionDetails';\nimport Typography from '@material-ui/core/Typography';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport SimpleSelects from './SimpleSelects';\nimport { List, Button } from '@material-ui/core';\nimport SaveIcon from '@material-ui/icons/Save';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: '100%',\n  },\n  heading: {\n    fontSize: theme.typography.pxToRem(16),\n    fontWeight: theme.typography.fontWeightRegular,\n    fontFamily: '\"Times New Roman\", Times, serif'\n  },\n  button: {\n    margin: theme.spacing(1),\n  }\n  \n}));\n\nexport default function GameConfig() {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <Accordion>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel1a-content\"\n          id=\"panel1a-header\"\n        >\n        <Typography className={classes.heading}> Game Configuration</Typography>\n        </AccordionSummary>\n        <AccordionDetails style={{position: 'relative'}}>\n          <BoardSizeConfigDetails classes={classes}></BoardSizeConfigDetails>\n        </AccordionDetails>\n      </Accordion>\n    </div>\n  );\n}\n\nfunction BoardSizeConfigDetails(classes) {\n  const boardSizes = ['Five By Five', 'Six By Six', 'Seven By Seven']\n  const difficultyLevels = ['Easy', 'Medium', 'Hard']\n  return(\n    <div>\n        <List>\n          <SimpleSelects title=\"Board Size\" options={boardSizes} helperText=\"Select the board size\"/>\n          <SimpleSelects title=\"Difficulty Level\" options={difficultyLevels} helperText=\"Decides the strength of the opponent\"/>\n\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            size=\"small\"\n            className={classes.button}\n            startIcon={<SaveIcon />}\n            fullWidth=\"true\"\n          >\n            Save\n          </Button>\n       </List>\n    </div>\n  )\n}","import React from 'react';\nimport clsx from 'clsx';\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\nimport Drawer from '@material-ui/core/Drawer';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Divider from '@material-ui/core/Divider';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\nimport GameConfig from './GameConfig';\n\nconst drawerWidth = 300;\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n  },\n  appBar: {\n    transition: theme.transitions.create(['margin', 'width'], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n  },\n  appBarShift: {\n    width: `calc(100% - ${drawerWidth}px)`,\n    marginLeft: drawerWidth,\n    transition: theme.transitions.create(['margin', 'width'], {\n      easing: theme.transitions.easing.easeOut,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  hide: {\n    display: 'none',\n  },\n  drawer: {\n    width: drawerWidth,\n    flexShrink: 0,\n  },\n  drawerPaper: {\n    width: drawerWidth,\n    backgroundColor: '#424242'\n  },\n  drawerHeader: {\n    display: 'flex',\n    alignItems: 'center',\n    padding: theme.spacing(0, 1),\n    // necessary for content to be below app bar\n    ...theme.mixins.toolbar,\n    justifyContent: 'flex-end',\n  },\n  content: {\n    flexGrow: 1,\n    padding: theme.spacing(3),\n    transition: theme.transitions.create('margin', {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n    marginLeft: -drawerWidth,\n  },\n  contentShift: {\n    transition: theme.transitions.create('margin', {\n      easing: theme.transitions.easing.easeOut,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n    marginLeft: 0,\n  },\n  componentColor: {\n    backgroundColor:'#424242'\n  }\n}));\n\nexport default function PersistentDrawerLeft() {\n  const classes = useStyles();\n  const theme = useTheme();\n  const [open, setOpen] = React.useState(false);\n\n  const handleDrawerOpen = () => {\n    setOpen(true);\n  };\n\n  const handleDrawerClose = () => {\n    setOpen(false);\n  };\n\n  return (\n    <div className={classes.root}>\n      <AppBar\n        position=\"fixed\"\n        className={clsx(classes.appBar, {\n          [classes.appBarShift]: open,\n        })}\n      >\n        <Toolbar className={classes.componentColor}>\n          <IconButton\n            color=\"inherit\"\n            aria-label=\"open drawer\"\n            onClick={handleDrawerOpen}\n            edge=\"start\"\n            className={clsx(classes.menuButton, open && classes.hide)}\n          >\n            <MenuIcon />\n          </IconButton>\n          <Typography variant=\"h6\" noWrap style={{fontSize:35, paddingLeft:'25px', fontFamily: '\"Times New Roman\", Times, serif'}}>\n            Isolation Game\n          </Typography>\n        </Toolbar>\n      </AppBar>\n\n      <Drawer\n        className={classes.drawer}\n        variant=\"persistent\"\n        anchor=\"left\"\n        open={open}\n        classes={{\n          paper: classes.drawerPaper,\n        }}\n      >\n        <div className={classes.drawerHeader}>\n          <IconButton onClick={handleDrawerClose}>\n            {theme.direction === 'ltr' ? <ChevronLeftIcon style={{color:'white'}}/> : <ChevronRightIcon />}\n          </IconButton>\n        </div>\n        <Divider />\n         <GameConfig className={classes.componentColor}></GameConfig>\n      </Drawer>\n    </div>\n  );\n}","import React from 'react';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport { Switch, BrowserRouter, Route } from 'react-router-dom';\nimport AppDrawer from './components/AppDrawer';\n\nexport default function App() {\n  const prefersDarkMode = useMediaQuery('(prefers-color-scheme: light)');\n  const theme = React.useMemo(\n    () =>\n      createMuiTheme({\n        palette: {\n          type: prefersDarkMode ? 'dark' : 'light',\n        },\n      }),\n    [prefersDarkMode],\n  );\n\n  return (\n   \n      <BrowserRouter>\n       <ThemeProvider theme={theme}>\n      <CssBaseline/>\n      <AppDrawer></AppDrawer>\n    </ThemeProvider>\n\n      <Switch>\n        <Route path=\"/game\">\n        <h1>Hey</h1>\n        </Route>\n      </Switch>\n      </BrowserRouter>\n\n  );\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}